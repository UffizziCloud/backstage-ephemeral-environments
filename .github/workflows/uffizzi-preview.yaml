name: Preview (deploy)

on:
  workflow_run:
    workflows:
      - 'Preview (build)'
    types:
      - completed

jobs:
  cache-manifests-file:
    name: Cache Manifests File
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    outputs:
      manifests-cache-key: ${{ env.MANIFESTS_FILE_HASH }}
      git-ref: ${{ env.GIT_REF }}
      pr-number: ${{ env.PR_NUMBER }}
    steps:
      - name: 'Download artifacts'
        # Fetch output (zip archive) from the workflow run that triggered this workflow.
        uses: actions/github-script@v6
        with:
          script: |
            let allArtifacts = await github.rest.actions.listWorkflowRunArtifacts({
               owner: context.repo.owner,
               repo: context.repo.repo,
               run_id: context.payload.workflow_run.id,
            });
            let matchArtifact = allArtifacts.data.artifacts.filter((artifact) => {
              return artifact.name == "preview-spec"
            })[0];
            if (matchArtifact === undefined) {
              throw TypeError('Build Artifact not found!');
            }
            let download = await github.rest.actions.downloadArtifact({
               owner: context.repo.owner,
               repo: context.repo.repo,
               artifact_id: matchArtifact.id,
               archive_format: 'zip',
            });
            let fs = require('fs');
            fs.writeFileSync(`${process.env.GITHUB_WORKSPACE}/preview-spec.zip`, Buffer.from(download.data));

      - name: 'Unzip artifact'
        run: unzip preview-spec.zip

      - name: Read Event into ENV
        run: |
          echo 'EVENT_JSON<<EOF' >> $GITHUB_ENV
          cat event.json >> $GITHUB_ENV
          echo -e '\nEOF' >> $GITHUB_ENV

      - name: Hash Rendered Manifests File
        id: hash
        # If the previous workflow was triggered by a PR close event, we will not have a manifests file artifact.
        if: ${{ fromJSON(env.EVENT_JSON).action != 'closed' }}
        run: |
          ls
          echo "MANIFESTS_FILE_HASH=$(md5sum ./uffizzi-backstage/manifests.rendered.yml | awk '{ print $1 }')" >> $GITHUB_ENV

      - name: Cache Manifests File
        if: ${{ fromJSON(env.EVENT_JSON).action != 'closed' }}
        uses: actions/cache@v3
        with:
          path: manifests.rendered.yml
          key: ${{ env.MANIFESTS_FILE_HASH }}

      - name: Read PR Number From Event Object
        id: pr
        run: echo "PR_NUMBER=${{ fromJSON(env.EVENT_JSON).number }}" >> $GITHUB_ENV

      - name: Read Git Ref From Event Object
        id: ref
        run: echo "GIT_REF=${{ fromJSON(env.EVENT_JSON).pull_request.head.sha }}" >> $GITHUB_ENV

      - name: DEBUG - Print Job Outputs
        if: ${{ runner.debug }}
        run: |
          echo "PR number: ${{ env.PR_NUMBER }}"
          echo "Git Ref: ${{ env.GIT_REF }}"
          echo "Manifests file hash: ${{ env.MANIFESTS_FILE_HASH }}"
          cat event.json

  deploy-uffizzi-preview:
    name: Deploy to Uffizzi Virtual Cluster
    needs:
    - cache-manifests-file
    if: ${{ github.event_name == 'pull_request' && github.event.action != 'closed' }}
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    # Identify comment to be updated
    - name: Find comment for Ephemeral Environment
      uses: peter-evans/find-comment@v2
      id: find-comment
      with:
        issue-number: ${{ github.event.pull_request.number }}
        comment-author: "github-actions[bot]"
        body-includes: pr-${{ github.event.pull_request.number }}
        direction: last

    # Create/Update comment with action deployment status
    - name: Create or Update Comment with Deployment Notification
      id: notification
      uses: peter-evans/create-or-update-comment@v2
      with:
        comment-id: ${{ steps.find-comment.outputs.comment-id }}
        issue-number: ${{ github.event.pull_request.number }}
        body: |
          ## Uffizzi Ephemeral Environment - Virtual Cluster

          :cloud: deploying ...

          :gear: Updating now by workflow run [${{ github.run_id }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}).

          Download the Uffizzi CLI to interact with the upcoming virtual cluster
          https://docs.uffizzi.com/install
        edit-mode: replace

    - name: Connect to Virtual Cluster
      uses: UffizziCloud/cluster-action@main
      with:
        cluster-name: pr-${{ github.event.pull_request.number }}
        server: https://app.uffizzi.com

    - name: Create or Update Comment with Deployment URL
      uses: peter-evans/create-or-update-comment@v2
      with:
        comment-id: ${{ steps.notification.outputs.comment-id }}
        issue-number: ${{ github.event.pull_request.number }}
        body: |
          ## Uffizzi Ephemeral Environment - Virtual Cluster

          Your cluster `pr-${{ github.event.pull_request.number }}` was successfully created. Learn more about [Uffizzi virtual clusters](https://docs.uffizzi.com/virtual-clusters)
          To connect to this cluster, follow these steps:

        edit-mode: replace

    # name: Use Remote Workflow to Preview on Uffizzi
    # needs:
    #   - cache-compose-file
    # if: ${{ github.event.workflow_run.conclusion == 'success' }}
    # uses: UffizziCloud/preview-action/.github/workflows/reusable.yaml@v2
    # with:
    #   # If this workflow was triggered by a PR close event, cache-key will be an empty string
    #   # and this reusable workflow will delete the preview deployment.
    #   compose-file-cache-key: ${{ needs.cache-compose-file.outputs.compose-file-cache-key }}
    #   compose-file-cache-path: docker-compose.rendered.yml
    #   git-ref: ${{ needs.cache-compose-file.outputs.git-ref }}
    #   pr-number: ${{ needs.cache-compose-file.outputs.pr-number }}
    #   server: https://app.uffizzi.com
    # permissions:
    #   contents: read
    #   pull-requests: write
    #   id-token: write
